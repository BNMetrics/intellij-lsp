package com.github.gtache.settings;

import com.github.gtache.client.MessageDialog;
import com.github.gtache.client.languageserver.serverdefinition.ArtifactLanguageServerDefinition;
import com.github.gtache.client.languageserver.serverdefinition.ExeLanguageServerDefinition;
import com.github.gtache.client.languageserver.serverdefinition.UserConfigurableServerDefinition;
import com.github.gtache.client.languageserver.serverdefinition.UserConfigurableServerDefinition$;
import com.github.gtache.utils.Utils;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.Collections;

/**
 * The GUI for the LSP settings
 */
public class LSPGUI {

    private static final Logger LOG = Logger.getInstance(LSPGUI.class);
    private final LSPState state;
    private UserConfigurableServerDefinition serverDefinition;
    private JLabel extLabel;
    private JPanel rootPanel;
    private JTextField extField;
    private JLabel servLabel;
    private JTextField servField;
    private JTextField mainClassField;
    private JTextField argsField;
    private JLabel mainClassLabel;
    private JLabel argsLabel;

    LSPGUI() {
        state = LSPState.getInstance();
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public JTextField getExtField() {
        return extField;
    }

    public JTextField getServField() {
        return servField;
    }

    public JTextField getArgsField() {
        return argsField;
    }

    public JTextField getMainClassField() {
        return mainClassField;
    }

    public void apply() {
        MessageDialog.main("The changes will be applied after restarting the IDE.");
        final String ext = extField.getText();
        final String serv = servField.getText();
        final String mainClass = mainClassField.getText();
        final String args = argsField.getText();
        LOG.info("Extracted " + ext + ", " + serv + ", " + mainClass + ", " + args + " from GUI");
        serverDefinition = UserConfigurableServerDefinition$.MODULE$.fromFields(ext, serv, mainClass, args);
        LSPState.getInstance().setExtToServ(Collections.singletonMap(ext, serverDefinition));
    }

    public boolean isModified() {
        return !(state.getFirstExt() == null && state.getFirstServerDefinition() == null && state.getFirstExt().equals(extField.getText()) && state.getFirstServerDefinition().equals(serverDefinition));
    }

    public void reset() {
        serverDefinition = state.getFirstServerDefinition();
        if (serverDefinition != null) {
            extField.setText(serverDefinition.ext());
            if (serverDefinition instanceof ArtifactLanguageServerDefinition) {
                servField.setText(((ArtifactLanguageServerDefinition) serverDefinition).packge());
                mainClassField.setText(((ArtifactLanguageServerDefinition) serverDefinition).mainClass());
                argsField.setText(Utils.arrayToString(((ArtifactLanguageServerDefinition) serverDefinition).args(), " "));
            } else if (serverDefinition instanceof ExeLanguageServerDefinition) {
                servField.setText(((ExeLanguageServerDefinition) serverDefinition).path());
                argsField.setText(Utils.arrayToString(((ExeLanguageServerDefinition) serverDefinition).args(), " "));
            } else {
                LOG.error("Unknown UserConfigurableServerDefinition");
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 13, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        extLabel = new JLabel();
        extLabel.setText("File Extension");
        rootPanel.add(extLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        extField = new JTextField();
        extField.setText("");
        extField.setToolTipText("e.g. scala, java, c, js, ...");
        rootPanel.add(extField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        servLabel = new JLabel();
        servLabel.setText("Server package");
        rootPanel.add(servLabel, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        servField = new JTextField();
        servField.setText("");
        servField.setToolTipText("e.g. ch.epfl.lamp:dotty-language-server_0.3:0.3.0-RC2");
        rootPanel.add(servField, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer3 = new Spacer();
        rootPanel.add(spacer3, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        rootPanel.add(spacer4, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        mainClassLabel = new JLabel();
        mainClassLabel.setText("Main class");
        rootPanel.add(mainClassLabel, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainClassField = new JTextField();
        mainClassField.setToolTipText("e.g. dotty.tools.languageserver.Main");
        rootPanel.add(mainClassField, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer5 = new Spacer();
        rootPanel.add(spacer5, new GridConstraints(0, 9, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        argsLabel = new JLabel();
        argsLabel.setText("Args");
        argsLabel.setToolTipText("e.g. -stdio a b c");
        rootPanel.add(argsLabel, new GridConstraints(0, 10, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        argsField = new JTextField();
        rootPanel.add(argsField, new GridConstraints(0, 11, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer6 = new Spacer();
        rootPanel.add(spacer6, new GridConstraints(0, 12, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
